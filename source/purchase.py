import json

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Regexp
from aiogram.dispatcher.filters.state import StatesGroup, State

import database
from loader import dp, bot
from source.admins import send_admins
from source.payments.qiwi.qiwi_params import check_db_qiwi, create_qiwi_link, check_qiwi_payment
from source.payments.yoo_money.yoo_money_params import check_db_yoomoney, create_yoomoney_link, check_yoomoney_payment
from src.const import const_ru
from src.strings import create_comment, get_now_date, get_buy_message


class PurchaseCreator(StatesGroup):
    user_count = State()
    item_count = State()
    payment_type = State()
    create_purchase = State()

    check_purchase = State()


async def select_count(message: types.Message, item_id):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤

    :param message:
    :param item_id: id –≤—ã–±—Ä–æ–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    :return:
    """
    await PurchaseCreator.item_count.set()

    item_count = database.get_item_count(item_id)

    state = Dispatcher.get_current().current_state()
    await state.update_data(item_id=item_id)

    keyboard = types.InlineKeyboardMarkup(row_width=5)

    i = 1
    btn_list = []
    while i <= 15 and i <= item_count:
        btn_list.append(types.InlineKeyboardButton(text=f"{str(i)} —à—Ç.",
                                                   callback_data=f"select_count={str(i)}"))
        i += 1

    await state.update_data(max_count=i)

    keyboard.add(*btn_list)
    keyboard.add(types.InlineKeyboardButton(text="üõí –°–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="user_count"))
    keyboard.add(types.InlineKeyboardButton(text=const_ru['cancel_buy'], callback_data="cancel_buy"))

    await message.answer("üõí –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard)


@dp.callback_query_handler(Regexp("select_count"), state=PurchaseCreator.item_count)
async def get_count_keyboard(call: types.CallbackQuery):
    """
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    :param call:
    :return:
    """
    await call.message.delete()

    call_data = call.data.split("=")
    state = Dispatcher.get_current().current_state()
    await state.update_data(count=int(call_data[1]))

    await select_payment(call.message, state)


@dp.callback_query_handler(Regexp("user_count"), state=PurchaseCreator.item_count)
async def input_count(call: types.CallbackQuery):
    """
    –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏

    :param call:
    :return:
    """
    await call.message.delete()
    state = Dispatcher.get_current().current_state()
    data = await state.get_data()
    item_id = data['item_id']

    item_count = database.get_item_count(item_id)
    max_count = 15
    if item_count < max_count:
        max_count = item_count

    await call.message.answer("üõí –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n"
                              "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <i>1 —à—Ç.</i>\n"
                              f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: <i>{max_count} —à—Ç.</i>")

    await state.update_data(max_count=int(max_count))


@dp.message_handler(state=PurchaseCreator.item_count)
async def check_count(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞

    :param message:
    :param state:
    :return:
    """
    data = await state.get_data()

    max_count = data['max_count']
    count = message.text

    if count.isdigit() and int(count) <= max_count:
        count = int(count)
    else:
        await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚ùóÔ∏è")
        return

    await state.update_data(count=count)
    await select_payment(message, state)


async def select_payment(message: types.Message, state: FSMContext):
    """
    –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã

    :param message:
    :param state:
    :return:
    """
    keyboard = types.InlineKeyboardMarkup()
    if check_db_qiwi():
        keyboard.add(types.InlineKeyboardButton(text=const_ru["qiwi"],
                                                callback_data="payment=qiwi"))

    if check_db_yoomoney():
        keyboard.add(types.InlineKeyboardButton(text=const_ru["yoomoney"],
                                                callback_data="payment=yoomoney"))

    length = len(json.loads(keyboard.as_json())["inline_keyboard"])

    if length > 0:
        keyboard.add(types.InlineKeyboardButton(text=const_ru['cancel_buy'], callback_data="cancel_buy"))
        await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=keyboard)

        await PurchaseCreator.next()
    else:
        await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        await state.finish()


@dp.callback_query_handler(Regexp("payment"), state=PurchaseCreator.payment_type)
async def check_payment_type(call: types.CallbackQuery):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∫—É–ø–∫–µ

    :param call:
    :return:
    """
    await call.message.delete()

    call_data = call.data.split("=")

    state = Dispatcher.get_current().current_state()
    await state.update_data(payment_type=call_data[1])

    await PurchaseCreator.next()
    await create_purchase(call.message, state)


@dp.message_handler(state=PurchaseCreator.create_purchase)
async def create_purchase(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏

    :param message:
    :param state:
    :return:
    """
    data = await state.get_data()
    item_data = database.get_item(data['item_id'])

    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_type = data['payment_type']
    comment = create_comment()
    amount = item_data[4] * int(data['count'])

    payment_form = dict()

    warning_payment = ""
    if payment_type == "qiwi":
        payment_form = create_qiwi_link(amount, comment)
        warning_payment = "‚ùóÔ∏è –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ –Ω–∏–∫–Ω–µ–π–º <b>—É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>, " \
                          "–∏–Ω–∞—á–µ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–∫—É–ø–∫—É\n" \
                          "–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏—á–µ–≥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å <b>–Ω–µ –Ω—É–∂–Ω–æ</b>. –í—Å—ë —Å–¥–µ–ª–∞–Ω–æ " \
                          "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚ùóÔ∏è\n"
    elif payment_type == "yoomoney":
        payment_form = create_yoomoney_link(amount, comment)
        warning_payment = "‚ùóÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –≥–¥–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>Ô∏è\n" \
                          "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç—å <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> ‚ùóÔ∏è\n"

    message_text = f"üõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ <b>{item_data[1]}</b>\n" \
                   f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <i>{data['count']} —à—Ç.</i>\n\n" \
                   f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>{const_ru['buy_item']}</b>\n" \
                   f"–ü–æ–ª—è –º–µ–Ω—è—Ç—å <b>–Ω–µ –Ω—É–∂–Ω–æ</b>\n" \
                   f"{warning_payment}\n" \
                   f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>{const_ru['check_buy']}</b>\n\n" \
                   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{payment_form['name']}</b>\n" \
                   f"üì± {payment_form['key']}: <b>{payment_form['value']}</b>\n" \
                   f"üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{comment}</b>\n" \
                   f"üíµ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <b>{amount} —Ä—É–±.</b>\n" \
                   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"

    keyboard = types.InlineKeyboardMarkup()

    keyboard.row(types.InlineKeyboardButton(text=const_ru['buy_item'], url=payment_form['link']),
                 types.InlineKeyboardButton(text=const_ru['check_buy'], callback_data="check_buy"))
    keyboard.row(types.InlineKeyboardButton(text=const_ru['cancel_buy'], callback_data="cancel_buy"))

    await message.answer(message_text, reply_markup=keyboard)

    await state.finish()
    await PurchaseCreator.check_purchase.set()
    state = Dispatcher.get_current().current_state()

    await state.update_data(item_id=data['item_id'])
    await state.update_data(amount=amount)
    await state.update_data(count=data['count'])
    await state.update_data(comment=comment)
    await state.update_data(payment_type=payment_type)


@dp.callback_query_handler(Regexp("check_buy"), state=PurchaseCreator.check_purchase)
async def check_purchase(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—É–ø–∫–∏

    :param call:
    :return:
    """
    state = Dispatcher.get_current().current_state()
    data = await state.get_data()

    item_id = data['item_id']
    amount = data['amount']
    count = data['count']
    comment = data['comment']
    payment_type = data['payment_type']

    has_payment = False

    if payment_type == "qiwi":
        has_payment = check_qiwi_payment(amount, comment)
    elif payment_type == "yoomoney":
        has_payment = check_yoomoney_payment(amount, comment)

    item_info = database.get_item(item_id)

    if has_payment:
        # –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        await call.message.delete()

        items_data = database.get_item_data(item_id, count, True)

        # –≤—Å—è –∏–Ω—Ñ–∞ –æ –ø–æ–∫—É–ø–∫–µ
        purchase_data = dict()
        purchase_data['user_id'] = call.message.chat.id
        purchase_data['item_name'] = item_info[1]
        purchase_data['amount'] = amount
        purchase_data['count'] = count
        purchase_data['date'] = get_now_date()
        purchase_data['payment_type'] = const_ru[payment_type]

        # –∑–∞–ø–∏—Å—å –ø–æ–∫—É–ø–∫–∏ –≤ –ë–î –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ ID
        sale_id = database.add_buy(purchase_data)
        database.add_sold_item_data(sale_id, items_data)
        purchase_data['sale_id'] = sale_id

        user_text = get_buy_message(call.message, purchase_data, True)
        admin_text = get_buy_message(call.message, purchase_data, False)

        item_files = []
        for i in range(len(items_data)):
            item_data = items_data[i][2].split("=", 2)
            admin_text += f"<b>{item_data[1]}\n</b>"

            if item_data[0] == "text":
                # —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                user_text += f"<b>{item_data[1]}\n</b>"
            elif item_data[0] == "file":
                # —Ñ–∞–π–ª–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                item_files.append(item_data[1])

        await call.message.answer(user_text)
        for i in range(len(item_files)):
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            await call.message.answer_document(open(item_files[i], "rb"))

        await send_admins(admin_text)
        await state.finish()
    else:
        # –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
        await bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                        text="‚ùóÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ùóÔ∏è\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.callback_query_handler(state=PurchaseCreator.item_count)
@dp.callback_query_handler(state=PurchaseCreator.check_purchase)
@dp.callback_query_handler(state=PurchaseCreator.payment_type)
@dp.callback_query_handler(Regexp("cancel_buy"))
async def cancel_buy(call: types.CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏

    :param call:
    :return:
    """
    await call.message.delete()
    await call.message.answer("‚ùóÔ∏è –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùóÔ∏è")

    state = Dispatcher.get_current().current_state()
    await state.finish()
