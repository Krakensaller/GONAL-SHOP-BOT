import time

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Regexp
from aiogram.dispatcher.filters.state import StatesGroup, State

import database
from loader import bot, dp
from src import config
from src.const import is_const


class MailingCreator(StatesGroup):
    mailing_format = State()
    mailing_text = State()
    mailing_send = State()


async def select_format(message: types.Message):
    """
    –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

    :param message:
    :return:
    """
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton(text="Markdown", callback_data="format=markdown"),
        types.InlineKeyboardButton(text="HTML", callback_data="format=html")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–æ—Å–æ–± —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                         "üîπ –î–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å HTML\n"
                         "üîπ –í —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Markdown, –Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n",
                         reply_markup=keyboard)

    await MailingCreator.mailing_format.set()


@dp.callback_query_handler(Regexp("format"), state=MailingCreator.mailing_format)
async def input_mailing(call: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")

    state = Dispatcher.get_current().current_state()
    await state.update_data(format=call_data[1])

    await call.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>{call_data[1].upper()}</i>\n"
                              "<b>–ò–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ</b>")

    await MailingCreator.next()


@dp.message_handler(state=MailingCreator.mailing_text, content_types=['text', 'photo'])
async def get_mailing_text(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    :param message:
    :param state:
    :return:
    """
    mailing_text = message.text

    mailing_photo = ""

    if len(message.photo) > 0:
        # —Ä–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        src = "mailings"
        config.create_folder(src)

        mailing_photo = f"{src}/{message.photo[-1].file_id}"
        await message.photo[-1].download(mailing_photo)
        mailing_text = message.caption

    await state.update_data(mailing_text=mailing_text)
    await state.update_data(mailing_photo=mailing_photo)

    await MailingCreator.next()
    await send_mailing(message, state)


@dp.message_handler(state=MailingCreator.mailing_send)
async def send_mailing(message: types.Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

    :param message:
    :param state:
    :return:
    """
    user_list = database.get_all_users()

    mailing_data = await state.get_data()

    mailing_text = mailing_data['mailing_text']
    if is_const(mailing_text):
        await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ ‚ùóÔ∏è")
        return

    mailing_photo = mailing_data['mailing_photo']
    parse_mode = mailing_data['format'].upper()
    await state.finish()

    success = 0
    bad = 0
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")

    if mailing_photo != "":
        # —Ä–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ
        for i in range(len(user_list)):
            try:
                await bot.send_photo(user_list[i][0],
                                     photo=open(mailing_photo, "rb"),
                                     caption=mailing_text,
                                     parse_mode=parse_mode)
                success += 1
            except:
                bad += 1

            if i % 20 == 0:
                time.sleep(1)
    else:
        # —Ä–∞—Å—Å—ã–ª–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        for i in range(len(user_list)):
            try:
                await bot.send_message(user_list[i][0],
                                       mailing_text,
                                       parse_mode=parse_mode)
                success += 1
            except:
                bad += 1

            if i % 20 == 0:
                time.sleep(1)

    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                         f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{len(user_list)} —à—Ç.</b>\n\n"
                         f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success} —à—Ç.</b>\n"
                         f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{bad} —à—Ç.</b>")
