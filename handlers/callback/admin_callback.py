from aiogram import types
from aiogram.dispatcher.filters import IDFilter, Regexp

import database
from handlers.message.admin_message import category_management, qiwi_edit, item_management
from loader import dp
from source import category
from source.items import item_creator
from source.items.item_editor import edit_item_menu
from source.params import input_param_value
from source.payments.qiwi import qiwi_params
from source.payments.qiwi.qiwi import qiwi_num
from source.payments.yoo_money import yoo_money_params
from source.payments.yoo_money.yoo_money import client_id
from source.support.support_admin import get_answer
from src import keyboards
from src.config import ADMIN_ID
from src.const import const_ru
# # # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ # # #
from src.keyboards import create_list_keyboard


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("get_category_management"))
async def get_category_management(call: types.CallbackQuery):
    """
    –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    :param call:
    :return:
    """
    await call.message.delete()
    await category_management(call.message)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("add_category"))
async def add_category(call: types.CallbackQuery):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param call:
    :return:
    """
    await call.message.delete()
    await category.add_name(call.message, -1)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("add_subcategory"))
async def add_subcategory(call: types.CallbackQuery):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    :param call:
    :return:
    """
    data = call.data.split("=")

    await call.message.delete()
    await category.add_name(call.message, data[1])


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("edit_category"))
async def edit_category(call: types.CallbackQuery):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π

    :param call:
    :return:
    """
    await call.message.delete()

    data = call.data.split("=")
    category_info = database.get_category(data[1])
    subcategories = database.get_subcategories(data[1])

    message_text = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_info[1]}</b>\n" \
                   f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"

    for i in range(len(subcategories)):
        message_text += f"‚ñ´ {subcategories[i][1]}\n"

    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text=const_ru["add_subcategory"],
                                            callback_data=f"add_subcategory={data[1]}"),
                 types.InlineKeyboardButton(text=const_ru["delete_subcategory"],
                                            callback_data=f"delete_sub—Åat_select={data[1]}"))

    keyboard.row(types.InlineKeyboardButton(text=const_ru["delete_category"],
                                            callback_data=f"delete_category={data[1]}"))

    keyboard.row(types.InlineKeyboardButton(text=const_ru["back"],
                                            callback_data=f"get_category_management"),
                 keyboards.CLOSE_BTN)

    message_text += "\n‚ùó –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, " \
                    "—É–¥–∞–ª—è—é—Ç—Å—è <b>–≤—Å–µ —Ç–æ–≤–∞—Ä—ã/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω–µ–π</b>"
    await call.message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("delete_category"))
async def delete_category(call: types.CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param call:
    :return:
    """
    await call.message.delete()
    data = call.data.split("=")
    database.delete_category(data[1])
    await call.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("delete_sub—Åat_select"))
async def delete_subcategory_select(call: types.CallbackQuery):
    """
    –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    :param call:
    :return:
    """
    await call.message.delete()
    data = call.data.split("=")

    keyboard = keyboards.create_subcategory_keyboard(data[1], "delete_subcategory")

    await call.message.answer("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID),
                           lambda call: call.data.startswith("delete_subcategory"))
async def delete_subcategory(call: types.CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param call:
    :return:
    """
    await call.message.delete()
    data = call.data.split("=")
    database.delete_subcategory(data[1])
    await call.message.answer("‚úÖ –ü–æ–¥–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")


# # # –¢–æ–≤–∞—Ä—ã # # #

@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("get_item_management"))
async def get_item_management(call: types.CallbackQuery):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤

    :param call:
    :return:
    """
    await call.message.delete()
    await item_management(call.message)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("get_item_category"))
async def get_item_category(call: types.CallbackQuery):
    """
    –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param call:
    :return:
    """
    await call.message.delete()

    data = call.data.split("=")
    keyboard = keyboards.create_category_items_keyboard(data[1], "get_item_subcategory", "get_item")
    keyboard.add(types.InlineKeyboardButton(text=const_ru["add_item"],
                                            callback_data=f"add_item={data[1]}|0"))
    keyboard.add(types.InlineKeyboardButton(text=const_ru["back"], callback_data="get_item_management"))
    keyboard.add(keyboards.CLOSE_BTN)

    await call.message.answer("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
                              "üìù –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ <i>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ</i>",
                              reply_markup=keyboard)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("get_item_subcategory"))
async def get_item_subcategory(call: types.CallbackQuery):
    """
    –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param call:
    :return:
    """
    await call.message.delete()

    data = call.data.split("=")

    categories = data[1].split("|")

    keyboard = keyboards.create_subcategory_items_keyboard(categories[0], categories[1], "get_item")
    keyboard.add(types.InlineKeyboardButton(text=const_ru["add_item"],
                                            callback_data=f"add_item={categories[0]}|{categories[1]}"))
    keyboard.row(types.InlineKeyboardButton(text=const_ru["back"],
                                            callback_data=f"get_item_category={categories[1]}"),
                 types.InlineKeyboardButton(text=const_ru["to_all_category"],
                                            callback_data="get_item_management"))
    keyboard.add(keyboards.CLOSE_BTN)

    await call.message.answer("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n\n"
                              "üìù –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ <i>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ</i>",
                              reply_markup=keyboard)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("get_item"))
async def get_item(call: types.CallbackQuery):
    """
    –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    :param call:
    :return:
    """
    await call.message.delete()
    item_id = call.data.split("=")[1]
    await edit_item_menu(call.message, item_id)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("add_item"))
async def add_item(call: types.CallbackQuery):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

    :param call:
    :return:
    """
    await call.message.delete()

    data = call.data.split("=")
    await item_creator.add_name(call.message, data[1])


# # # –ö–æ—à–µ–ª—å–∫–∏ # # #

@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("change_qiwi"))
async def change_qiwi(call: types.CallbackQuery):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã QIWI

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")
    database.set_param("qiwi_payment", call_data[1])
    await call.message.answer("‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω")
    await qiwi_edit(call.message)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("edit_qiwi"))
async def edit_qiwi(call: types.CallbackQuery):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ QIWI

    :param call:
    :return:
    """
    await call.message.delete()
    await qiwi_num(call.message)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("check_qiwi"))
async def check_qiwi(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ QIWI

    :param call:
    :return:
    """
    await call.message.delete()
    qiwi_data = database.get_qiwi()

    if qiwi_params.check_qiwi(qiwi_data[1], qiwi_data[2]):
        await call.message.answer("‚úÖ –ö–æ—à–µ–ª—ë–∫ –∞–∫—Ç–∏–≤–µ–Ω")
    else:
        await call.message.answer("‚ùóÔ∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚ùóÔ∏è")


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("edit_yoomoney"))
async def edit_yoomoney(call: types.CallbackQuery):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ YooMoney

    :param call:
    :return:
    """
    await call.message.delete()
    await client_id(call.message)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("check_yoomoney"))
async def check_yoomoney(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ YooMoney

    :param call:
    :return:
    """
    await call.message.delete()
    yoomoney_data = database.get_yoomoney()

    if yoo_money_params.check_yoomoney(yoomoney_data[2]):
        await call.message.answer("‚úÖ –ö–æ—à–µ–ª—ë–∫ –∞–∫—Ç–∏–≤–µ–Ω")
    else:
        await call.message.answer("‚ùóÔ∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚ùóÔ∏è")


# # # –ü—Ä–æ—á–µ–µ # # #

@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("edit_hello"))
async def edit_hello(call: types.CallbackQuery):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

    :param call:
    :return:
    """
    await call.message.delete()
    await input_param_value(call.message, "hello_message")


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("edit_comeback"))
async def edit_hello(call: types.CallbackQuery):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

    :param call:
    :return:
    """
    await call.message.delete()
    await input_param_value(call.message, "comeback_message")


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("edit_faq"))
async def edit_faq(call: types.CallbackQuery):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ

    :param call:
    :return:
    """
    await call.message.delete()
    await input_param_value(call.message, "faq")


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("edit_rules"))
async def edit_rules(call: types.CallbackQuery):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª

    :param call:
    :return:
    """
    await call.message.delete()
    await input_param_value(call.message, "rules")


# # # –û–±—Ä–∞—â–µ–Ω–∏—è # # #

@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("get_user_support"))
async def get_supports(call: types.CallbackQuery):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")
    data = call_data[1].split("|")
    # keyboard = get_supports_keyboard(data[0], data[1])
    keyboard = create_list_keyboard(data=database.get_supports(data[0]),
                                    last_index=int(data[1]),
                                    page_click=f"get_supports={data[0]}",
                                    btn_text_param="support",
                                    btn_click="get_support")

    if data[0] == "0":
        message_text = const_ru["active_support"]
    else:
        message_text = const_ru["close_support"]

    await call.message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("get_support"))
async def get_support(call: types.CallbackQuery):
    """
    –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")

    support_data = database.get_support(call_data[1])
    keyboard = types.InlineKeyboardMarkup()

    delete_btn = types.InlineKeyboardButton(text=const_ru["delete"],
                                            callback_data=f"delete_support={call_data[1]}")
    if int(support_data[5]) == 0:
        support_state = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ"
        keyboard.row(types.InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
                                                callback_data=f"answer_support={call_data[1]}"),
                     delete_btn)
    else:
        support_state = "‚ùå –ó–∞–∫—Ä—ã—Ç–æ\n" \
                        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                        f"üìß –û—Ç–≤–µ—Ç:\n\n" \
                        f"{support_data[6]}"

        keyboard.add(delete_btn)

    message_text = f"üÜî –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: <b>{call_data[1]}</b>\n" \
                   f"üôç‚Äç‚ôÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{support_data[2]}</b>\n" \
                   "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üìó –¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞: <b>{database.get_support_type(support_data[4])[1]}</b>\n" \
                   f"üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{support_data[3]}\n" \
                   "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ: {support_state}"

    keyboard.add(keyboards.CLOSE_BTN)
    await call.message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("answer_support"))
async def answer_support(call: types.CallbackQuery):
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")
    await get_answer(call.message, call_data[1])


@dp.callback_query_handler(IDFilter(chat_id=ADMIN_ID), Regexp("delete_support"))
async def delete_support(call: types.CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")
    database.delete_support(call_data[1])
    await call.message.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
